/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package supertetris;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageFilter;
import java.awt.image.ImageProducer;
import java.awt.image.RGBImageFilter;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.WindowConstants;

/**
 *
 * @author eagle
 */
public class Tetris extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public Tetris() {
        initComponents();
        initImage();
        initTetris();
        overJDialog.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        overJDialog = new javax.swing.JDialog(){
            protected void paintComponent(Graphics g) {
                Image img = new ImageIcon("res/gameover.jpg").getImage();
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        };
        overJPanel = new javax.swing.JPanel(){
            protected void paintComponent(Graphics g) {
                Image img = new ImageIcon("res/gameover.jpg").getImage();
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        };
        scoreJLabel = new javax.swing.JLabel();
        bkJpanel = new javax.swing.JPanel(){
            protected void paintComponent(Graphics g) {
                Image img = new ImageIcon("res/bkk.jpg").getImage();
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        };
        mapJPanel = new javax.swing.JPanel(){
            protected void paintComponent(Graphics g){
                Graphics2D graphics2d = (Graphics2D) g.create();

                graphics2d.setComposite(AlphaComposite.SrcOver.derive(0.5f));
                graphics2d.setColor(getBackground());
                graphics2d.fillRect(0, 0, getWidth(), getHeight());
                graphics2d.dispose();
            }
        };
        helpJLabel1 = new javax.swing.JLabel();
        helpJLabel2 = new javax.swing.JLabel();
        helpJLabel3 = new javax.swing.JLabel();
        helpJLabel4 = new javax.swing.JLabel();
        helpJLabel5 = new javax.swing.JLabel();
        startJButton = new javax.swing.JButton();
        endtJButton = new javax.swing.JButton();
        setSpeedJButton = new javax.swing.JButton();
        nowScoreJLabel = new javax.swing.JLabel();
        nextJLabel = new javax.swing.JLabel();

        overJDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        overJDialog.setTitle("游戏结束");
        overJDialog.setLocation((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()/2-175,(int)Toolkit.getDefaultToolkit().getScreenSize().getHeight()/2-100);
        overJDialog.setSize(new java.awt.Dimension(400, 300));

        overJPanel.setPreferredSize(new java.awt.Dimension(379, 233));

        scoreJLabel.setFont(new java.awt.Font("华文行楷", 0, 36)); // NOI18N
        scoreJLabel.setForeground(new java.awt.Color(0, 204, 51));
        scoreJLabel.setText("得分：");

        javax.swing.GroupLayout overJPanelLayout = new javax.swing.GroupLayout(overJPanel);
        overJPanel.setLayout(overJPanelLayout);
        overJPanelLayout.setHorizontalGroup(
            overJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overJPanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(scoreJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        overJPanelLayout.setVerticalGroup(
            overJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, overJPanelLayout.createSequentialGroup()
                .addContainerGap(126, Short.MAX_VALUE)
                .addComponent(scoreJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout overJDialogLayout = new javax.swing.GroupLayout(overJDialog.getContentPane());
        overJDialog.getContentPane().setLayout(overJDialogLayout);
        overJDialogLayout.setHorizontalGroup(
            overJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(overJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        overJDialogLayout.setVerticalGroup(
            overJDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(overJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        setPreferredSize(new java.awt.Dimension(353, 406));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        bkJpanel.setAlignmentX(0.0F);
        bkJpanel.setAlignmentY(0.0F);
        bkJpanel.setPreferredSize(new java.awt.Dimension(353, 405));

        mapJPanel.setBackground(new java.awt.Color(51, 51, 51));
        mapJPanel.setAlignmentX(0.0F);
        mapJPanel.setAlignmentY(0.0F);
        mapJPanel.setPreferredSize(new java.awt.Dimension(204, 404));

        helpJLabel1.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        helpJLabel1.setForeground(new java.awt.Color(255, 255, 51));
        helpJLabel1.setText("左移：A 或 ←");

        helpJLabel2.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        helpJLabel2.setForeground(new java.awt.Color(255, 255, 51));
        helpJLabel2.setText("右移：D 或 →");

        helpJLabel3.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        helpJLabel3.setForeground(new java.awt.Color(255, 255, 51));
        helpJLabel3.setText("下移：S 或 ↓");

        helpJLabel4.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        helpJLabel4.setForeground(new java.awt.Color(255, 255, 51));
        helpJLabel4.setText("旋转：W 或 ↑");

        helpJLabel5.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        helpJLabel5.setForeground(new java.awt.Color(255, 255, 51));
        helpJLabel5.setText("迅速下落：空格");

        javax.swing.GroupLayout mapJPanelLayout = new javax.swing.GroupLayout(mapJPanel);
        mapJPanel.setLayout(mapJPanelLayout);
        mapJPanelLayout.setHorizontalGroup(
            mapJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapJPanelLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(mapJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpJLabel5)
                    .addComponent(helpJLabel4)
                    .addComponent(helpJLabel3)
                    .addComponent(helpJLabel2)
                    .addComponent(helpJLabel1))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        mapJPanelLayout.setVerticalGroup(
            mapJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapJPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(helpJLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpJLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpJLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpJLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpJLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        startJButton.setBackground(new java.awt.Color(0, 51, 153));
        startJButton.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        startJButton.setForeground(new java.awt.Color(255, 255, 255));
        startJButton.setText("开始");
        startJButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        startJButton.setFocusPainted(false);
        startJButton.setFocusable(false);
        startJButton.setPreferredSize(new java.awt.Dimension(80, 30));
        startJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startJButtonActionPerformed(evt);
            }
        });

        endtJButton.setBackground(new java.awt.Color(102, 0, 255));
        endtJButton.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        endtJButton.setForeground(new java.awt.Color(255, 255, 255));
        endtJButton.setText("结束游戏");
        endtJButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        endtJButton.setFocusPainted(false);
        endtJButton.setFocusable(false);
        endtJButton.setPreferredSize(new java.awt.Dimension(80, 30));
        endtJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endtJButtonActionPerformed(evt);
            }
        });

        setSpeedJButton.setBackground(new java.awt.Color(255, 153, 51));
        setSpeedJButton.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        setSpeedJButton.setForeground(new java.awt.Color(255, 255, 255));
        setSpeedJButton.setText("设置速度(1)");
        setSpeedJButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setSpeedJButton.setFocusPainted(false);
        setSpeedJButton.setFocusable(false);
        setSpeedJButton.setPreferredSize(new java.awt.Dimension(80, 30));
        setSpeedJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSpeedJButtonActionPerformed(evt);
            }
        });

        nowScoreJLabel.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        nowScoreJLabel.setForeground(new java.awt.Color(255, 51, 204));
        nowScoreJLabel.setText("得分：");

        nextJLabel.setFont(new java.awt.Font("幼圆", 1, 12)); // NOI18N
        nextJLabel.setForeground(new java.awt.Color(102, 255, 102));
        nextJLabel.setText("下一个方块");

        javax.swing.GroupLayout bkJpanelLayout = new javax.swing.GroupLayout(bkJpanel);
        bkJpanel.setLayout(bkJpanelLayout);
        bkJpanelLayout.setHorizontalGroup(
            bkJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bkJpanelLayout.createSequentialGroup()
                .addComponent(mapJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(bkJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bkJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(startJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endtJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(setSpeedJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nowScoreJLabel)
                    .addComponent(nextJLabel))
                .addGap(26, 26, 26))
        );
        bkJpanelLayout.setVerticalGroup(
            bkJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bkJpanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(nextJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(nowScoreJLabel)
                .addGap(121, 121, 121)
                .addComponent(setSpeedJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endtJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addComponent(mapJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bkJpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bkJpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startJButtonActionPerformed
        // TODO add your handling code here:
        if (!isRun) {
            runTeris();
            startJButton.setText("暂停");
        } else {
            if (!isPause) {
                isPause = true;
                startJButton.setText("继续");
            } else {
                isPause = false;
                startJButton.setText("暂停");
            }
        }
    }//GEN-LAST:event_startJButtonActionPerformed

    private void endtJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endtJButtonActionPerformed
        // TODO add your handling code here:
        if (isRun) {
            endTeris();
        }
    }//GEN-LAST:event_endtJButtonActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
//        if (isPause || !isRun) {
//            return;
//        }
//
//        switch (evt.getKeyCode()) {
//            case KeyEvent.VK_DOWN:
//                myTetris.Move(MyTetris.Direction.DOWN);
//                if (myTetris.isGameOver()) {
//                    endTeris();
//                    return;
//                }
//                repaint();
//                break;
//            case KeyEvent.VK_LEFT:
//                myTetris.Move(MyTetris.Direction.LEFT);
//                repaint();
//                break;
//            case KeyEvent.VK_RIGHT:
//                myTetris.Move(MyTetris.Direction.RIGHT);
//                repaint();
//                break;
//            case KeyEvent.VK_UP:
//                myTetris.Rotate();
//                repaint();
//            default:
//                break;
//        }
    }//GEN-LAST:event_formKeyPressed

    private void setSpeedJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSpeedJButtonActionPerformed
        // TODO add your handling code here:
        if (isRun) {
            return;
        }
        JComboBox jbx = new JComboBox();
        jbx.addItem("1");
        jbx.addItem("2");
        jbx.addItem("3");
        jbx.addItem("4");
        jbx.addItem("5");
        jbx.setFont(new Font("宋体", Font.BOLD, 20));
//        jbx.setBackground(Color.black);
//        jbx.setForeground(Color.GREEN);

        JButton jbtn = new JButton("确定");
        jbtn.setFont(new Font("宋体", Font.BOLD, 20));
        jbtn.setBackground(Color.DARK_GRAY);
        jbtn.setForeground(Color.GREEN);

        JFrame jfm = new JFrame("选择速度");
//        jfm.setBackground(Color.black);
//        jfm.setForeground(Color.GREEN);
        jfm.setLayout(new BorderLayout(10, 10));
        jfm.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        jfm.setSize(300, 80);
        jfm.setResizable(false);
        jfm.setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - 200,
                (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - 50);
        jfm.add(jbx, "Center");
        jfm.add(jbtn, "East");
        jfm.setVisible(true);

        jbtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Speed = Integer.valueOf(jbx.getSelectedItem().toString());
                setSpeedJButton.setText("设置速度(" + Speed + ")");
                jfm.dispose();
            }
        });
    }//GEN-LAST:event_setSpeedJButtonActionPerformed

    public void keyDown() {
        if (isPause || !isRun) {
            return;
        }

        myTetris.Move(MyTetris.Direction.DOWN);
        if (myTetris.isGameOver()) {
            endTeris();
            return;
        }
        repaint();
    }

    public void keyLeft() {
        if (isPause || !isRun) {
            return;
        }

        myTetris.Move(MyTetris.Direction.LEFT);
        repaint();
    }

    public void keyRight() {
        if (isPause || !isRun) {
            return;
        }

        myTetris.Move(MyTetris.Direction.RIGHT);
        repaint();
    }

    public void keyUp() {
        if (isPause || !isRun) {
            return;
        }

        myTetris.Rotate();
        repaint();
    }

    public void keySpace() {
        if (isPause || !isRun) {
            return;
        }

        myTetris.goBottom();
        repaint();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        drawit(g);
    }

    void drawit(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(2.0f));
        g2.setColor(Color.orange);
        g2.drawRect(1, 1, 203, 403);

        g2.setColor(new Color(102, 255, 102));
        g2.setStroke(new BasicStroke(1.0f));
        g2.drawRect(232, 40, 90, 90);

        g2.drawImage(gifImage, 230, 170, 90, 90, this);

        if (isRun) {
            // 显示得分
            nowScoreJLabel.setText("得分：" + myTetris.getScore());

            // 读取地图信息，绘图
            int[][] mapTmp = myTetris.getMapValue();
            for (int i = 19, row = 0; i >= 0; i--, row++) {
                for (int j = 0, col = 0; j < 10; j++, col++) {
                    int color = mapTmp[i][j];
                    int x = BLOCK_SIZE * col + ORIGIN_X;
                    int y = BLOCK_SIZE * row + ORIGIN_Y;

                    if (color != 0) {
                        g2.drawImage(blockImage[color - 1], x, y, BLOCK_SIZE, BLOCK_SIZE, this);
                        g2.setColor(Color.black);
                        g2.setStroke(new BasicStroke(1.0f));
                        g2.drawRect(x, y, BLOCK_SIZE, BLOCK_SIZE);

                    }
//                    System.out.print(color);
                }
//                System.out.println();
            }

            // 预判最终下落位置
            ArrayList<MyTetris.Position> Last = myTetris.lastPosition();
            for (MyTetris.Position tmpLast : Last) {
                int x = BLOCK_SIZE * tmpLast.getC() + ORIGIN_X;
                int y = BLOCK_SIZE * (19 - tmpLast.getR()) + ORIGIN_Y;
                g2.setColor(Color.white);
                g2.drawRect(x, y, BLOCK_SIZE, BLOCK_SIZE);
            }

            ArrayList<MyTetris.Position> Next = myTetris.getNextBolckValue();
            boolean flag = false;   // 标记是否需要特殊对待，使得其居中
            for (MyTetris.Position tmpNext : Next) {
                if (tmpNext.getC() == 0) {
                    flag = true;
                }
            }
            for (MyTetris.Position tmpNext : Next) {
                int x = BLOCK_SIZE * tmpNext.getC() + 237;
                int y = BLOCK_SIZE * (3 - tmpNext.getR()) + 45;
                // 如果方块靠近最左边或者是I型的，向右10px就可以居中了
                if (flag || myTetris.getNextBlock().getType() == MyBlock.BlockShape.I) {
                    x += 10;
                }
                g2.drawImage(blockImage[myTetris.getNextBlock().getBlockColor() - 1],
                        x, y, BLOCK_SIZE, BLOCK_SIZE, this);
            }
        }
    }

    final void initImage() {
        blockImage = new Image[10];
        for (int i = 0; i < 8; i++) {
            blockImage[i] = new ImageIcon("res/" + i + ".png").getImage();
        }

        Image tmpImage = new ImageIcon("res/01.gif").getImage();
        gifImage = makeColorTransparent(tmpImage, Color.WHITE);
    }

    /**
     * 把图片的某个颜色变透明
     *
     * @param im 要改变的图片
     * @param color 要透明的颜色
     * @return 转换后的图片
     */
    public static Image makeColorTransparent(Image im, final Color color) {
        ImageFilter filter = new RGBImageFilter() {
            // the color we are looking for... Alpha bits are set to opaque
            public int markerRGB = color.getRGB() | 0xFF000000;

            @Override
            public final int filterRGB(int x, int y, int rgb) {
                if ((rgb | 0xFF000000) == markerRGB) {
                    // Mark the alpha bits as zero - transparent
                    return 0x00FFFFFF & rgb;
                } else {
                    // nothing to do
                    return rgb;
                }
            }
        };

        ImageProducer ip = new FilteredImageSource(im.getSource(), filter);
        return Toolkit.getDefaultToolkit().createImage(ip);
    }

    void initTetris() {
        isRun = false;
        isPause = false;
        nowScoreJLabel.setText("得分：");
    }

    void runTeris() {
        helpJLabel1.setVisible(false);
        helpJLabel2.setVisible(false);
        helpJLabel3.setVisible(false);
        helpJLabel4.setVisible(false);
        helpJLabel5.setVisible(false);
        
        isRun = true;
        myTetris = new MyTetris(10, 20);
        myTetris.runGame();

        tetrisTimer = new Timer();
        myTask = new myTimerTask();
        long Period = 5 / Speed * 200;
        try {
            tetrisTimer.scheduleAtFixedRate(myTask, 100, Period);
        } catch (Exception e) {
            System.out.println(e.toString());
        }

    }

    void endTeris() {
        helpJLabel1.setVisible(true);
        helpJLabel2.setVisible(true);
        helpJLabel3.setVisible(true);
        helpJLabel4.setVisible(true);
        helpJLabel5.setVisible(true);
        
        initTetris();
        tetrisTimer.cancel();
        myTask.cancel();
        startJButton.setText("开始");
        repaint();
    }

    Timer tetrisTimer;
    TimerTask myTask;

    // 定时器要执行的内容
    class myTimerTask extends TimerTask {

        @Override
        public void run() {
            if (!isPause && isRun) {
                myTetris.Move(MyTetris.Direction.DOWN);
                if (myTetris.isGameOver()) {
                    scoreJLabel.setText("得分：" + myTetris.getScore());
                    overJDialog.setVisible(true);
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Tetris.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    endTeris();
                    return;
                }
                repaint();
            }
        }

    }

    Image[] blockImage;     // 存储绘制方块的图片
    Image gifImage;         // gif图像
    MyTetris myTetris;      // 游戏类对象

    private static boolean isRun;       // 标记是否正在运行游戏
    private static boolean isPause;     // 标记是否暂停
    int Speed = 1;                      // 方块下落的速度，1-5个等级

    private static final int BLOCK_SIZE = 20;   // 每个小方块的大小
    private static final int ORIGIN_X = 2;      // 绘制在窗体上的坐标原点，x轴
    private static final int ORIGIN_Y = 2;      // 绘制在窗体上的坐标原点，y轴

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bkJpanel;
    private javax.swing.JButton endtJButton;
    private javax.swing.JLabel helpJLabel1;
    private javax.swing.JLabel helpJLabel2;
    private javax.swing.JLabel helpJLabel3;
    private javax.swing.JLabel helpJLabel4;
    private javax.swing.JLabel helpJLabel5;
    private javax.swing.JPanel mapJPanel;
    private javax.swing.JLabel nextJLabel;
    private javax.swing.JLabel nowScoreJLabel;
    private javax.swing.JDialog overJDialog;
    private javax.swing.JPanel overJPanel;
    private javax.swing.JLabel scoreJLabel;
    private javax.swing.JButton setSpeedJButton;
    private javax.swing.JButton startJButton;
    // End of variables declaration//GEN-END:variables
}
